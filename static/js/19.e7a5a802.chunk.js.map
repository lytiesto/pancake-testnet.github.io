{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","state/hooks.ts","hooks/useTokenBalance.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","ethers","BigNumber","from","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","LIVE","liveAndCurrent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","claim","tx","wait","receipt","transactionHash","href","getBscScanLink","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toFormat","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","getPayoutv2","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetRewardRate","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","getHeaderText","getHeaderIcon","claimedHash","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","RoundResultHistory","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","store","getState","predictions","reduce","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","whiteSpace","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","useGetIsClaimable","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","initialBlock","useBlock","useGetBetByEpoch","formattedPayout","toUnsafeFloat","hasRoundFailed","oracleCalled","getHasRoundFailed","BlockProgress","rawProgress","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","estimatedEndBlockPlusPadding","BLOCK_PADDING","priceAsNumber","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","parseUnits","dust","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","useGetIntervalBlocks","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useBlockCountdown","secondsRemaining","setSecondsRemaining","simpleRpcProvider","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedbearMultiplier","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","INITIAL","PageLoader","roundData","useSelector","keys","accum","parseBigNumberObj","useGetRounds","ledgers","claimableStatuses","earliestRound","minBy","intervalBlocks","bufferBlocks","currentRoundStartBlockNumber","history","lastOraclePrice","useGetCollectibles","collectibles","isInitialized","identifiers","fetchWalletNfts","tokenIds","nftsInWallet","Nfts","nft","includes","identifier","FetchStatus","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","setBalance","getBep20Contract","balanceOf","res","fetchBalance","getBalance","walletBalance","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev"],"mappings":"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","file":"static/js/19.e7a5a802.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status === PredictionStatus.LIVE) {\r\n      timer.current = setInterval(async () => {\r\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\r\n\r\n        dispatch(fetchRounds(liveAndCurrent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { fetchClaimableStatuses } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Convert payout to number for compatibility\r\n  const payoutAsFloat = parseFloat(payout)\r\n  const betAmountAsFloat = parseFloat(betAmount)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await predictionsContract.claim(epoch)\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <Box>\r\n          <Text as=\"p\" mb=\"8px\">\r\n            {t('Your prizes have been sent to your wallet')}\r\n          </Text>\r\n          {receipt.transactionHash && (\r\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          )}\r\n        </Box>,\r\n      )\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${betAmount} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Your winnings')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${payout} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await predictionsContract.claim(epoch)\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'))\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { ethers } from 'ethers'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\r\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\r\n  const value = bnb || ethers.BigNumber.from(0)\r\n  return formatBigNumberToFixed(value, 4)\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\r\n  if (!round.endBlock) {\r\n    return false\r\n  }\r\n\r\n  return blockNumber > round.endBlock && round.oracleCalled === false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const { bullAmount, bearAmount, rewardAmount } = round\r\n  const { amount, position } = ledger\r\n\r\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\r\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return amountFixed.mulUnsafe(multiplier)\r\n}\r\n\r\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const payout = getPayoutv2(ledger, round)\r\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\r\n\r\n  return payout.subUnsafe(amount)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getBetPosition(closePrice, lockPrice)\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {closePrice ? (\r\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n              {formatUsdv2(closePrice)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"34px\" my=\"1px\" />\r\n          )}\r\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const canClaim = await predictionsContract.claimable(epoch, account)\r\n\r\n      if (canClaim) {\r\n        const refundable = await predictionsContract.refundable(epoch, account)\r\n        setIsRefundable(refundable)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetRewardRate } from 'state/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n  const rewardRate = useGetRewardRate()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, rewardRate) : bet.amount\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={formatBnb(payout)}\r\n            betAmount={bet.amount.toString()}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.endBlock, 'block')} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/hooks'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const rewardRate = useGetRewardRate()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            epoch={bet.round.epoch}\r\n            payout={formatBnb(payout)}\r\n            onSuccess={handleSuccess}\r\n            betAmount={bet.amount.toString()}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport store from 'state'\r\nimport { useGetCurrentEpoch } from 'state/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  const state = store.getState()\r\n  const rewardRate = state.predictions.rewardRate / 100\r\n\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, rewardRate)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <UnlockButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag).attrs({\r\n  variant: 'secondary',\r\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\r\n})`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box mt=\"-1px\" position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"-1px\" position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  payout: string\r\n  betAmount: string\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  epoch,\r\n  payout,\r\n  betAmount,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useGetBetByEpoch } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { initialBlock } = useBlock()\r\n  const { epoch, endBlock, lockPrice, closePrice } = round\r\n\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const payout = getNetPayoutv2(ledger, round)\r\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\r\n  const hasRoundFailed = getHasRoundFailed(round, initialBlock)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          blockNumber={endBlock}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay\r\n        epoch={epoch}\r\n        payout={formattedPayout}\r\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\r\n        isBottom={hasEnteredDown}\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/block/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { BLOCK_PADDING } from 'state/predictions'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const price = useGetLastOraclePrice()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (currentBlock > estimatedEndBlockPlusPadding) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlockPlusPadding}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsdv2(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\r\n}\r\n\r\n// /!\\ TEMPORARY /!\\\r\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\r\n// TODO: Remove on beta-v2 smart contract release.\r\nconst gasPrice = parseUnits('6', 'gwei')\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  // Convert bnb balance to ethers.BigNumber\r\n  const bnbBalanceAsBn = useMemo(() => {\r\n    return ethers.BigNumber.from(bnbBalance.toString())\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\r\n  }, [bnbBalanceAsBn])\r\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await predictionsContract[betMethod]({ value: valueAsBn.toString(), gasPrice })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { useGetIntervalBlocks } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierv2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedbearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedbearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\nimport useOnViewChange from './hooks/useOnViewChange'\r\nimport { PageView } from './types'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\r\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\r\n  const swiperIndex = rounds.indexOf(previousRound)\r\n\r\n  useOnNextRound()\r\n  useOnViewChange(swiperIndex, view)\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={swiperIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","export enum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport { PageView } from './types'\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ChartDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\r\n        </Text>\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\r\n        </Text>\r\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n          {t('I understand')}\r\n        </Button>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          <LinkExternal\r\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n            external\r\n          >\r\n            {t('Learn More')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/hooks'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\r\nimport { fetchWalletNfts } from './collectibles'\r\nimport { parseBigNumberObj } from './predictions/helpers'\r\n\r\n// /!\\\r\n// Don't add anything here. These hooks will be moved the the predictions folder\r\n\r\n// Predictions\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetRewardRate = () => {\r\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\r\n  return rewardRate / 100\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\r\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!ledgers[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!ledgers[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return ledgers[account][roundId]\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"sourceRoot":""}