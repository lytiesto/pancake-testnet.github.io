{"version":3,"sources":["../node_modules/lodash/max.js","views/Home/hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/PredictionPromotionCard.tsx","views/Home/components/LotteryPromotionCard.tsx","views/Home/components/LotteryBanner.tsx","views/Home/hooks/useFetchLotteryForPromos.ts","views/Home/Home.tsx","hooks/useTokenBalance.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["baseExtremum","require","baseGt","identity","module","exports","array","length","undefined","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","useToast","toastSuccess","toastError","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvestFarm","symbol","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","cakeRewardsApr","lpRewardsApr","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","StyledPredictionCard","sm","md","PredictionLive","Text","PredictionOver","PredictionWon","Balance","StyledSkeleton","Skeleton","PredictionBNBSoFar","PredictionTryNow","Flex","PredictionPromotionCard","slowRefresh","loadData","setLoadData","bnbBusdPrice","usePriceBnbBusd","bnbWon","setBnbWon","bnbWonInUsd","setBnbWonInUsd","getTotalWon","totalWon","fetchMarketData","bnbWonInUsdText","toString","amount","over","bnbSoFar","href","px","PrizeText","LotteryPromotionCard","currentLotteryPrize","prizeInBusd","prizeTotal","prizeTotalText","isNaN","inPrizes","NowLive","Wrapper","Inner","Container","LeftWrapper","RightWrapper","PrizeFlex","Over","LotteryBanner","mr","useFetchLotteryForPromos","lotteryId","setLotteryId","setCurrentLotteryPrize","fetchCurrentLotteryIdAndMaxBuy","currentLotteryId","fetchCurrentID","fetchLottery","amountCollectedInCake","fetchCurrentLotteryPrize","Hero","Cards","BaseLayout","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2"],"mappings":"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","file":"static/js/16.4bdee902.chunk.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from 'hooks/useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FarmWithBalance } from 'views/Home/hooks/useFarmsWithBalance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\ninterface CakeHarvestBalanceProps {\r\n  farmsWithBalance: FarmWithBalance[]\r\n}\r\n\r\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning.balance)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const masterChefContract = useMasterchef()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const farmWithBalance of balancesWithValue) {\r\n      try {\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\r\n        toastSuccess(\r\n          `${t('Harvested')}!`,\r\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n        )\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    }\r\n    setPendingTx(false)\r\n  }, [balancesWithValue, masterChefContract, toastSuccess, toastError, t])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting CAKE')\r\n                : t('Harvest all (%count%)', {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={19} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useIntersectionObserver = () => {\r\n  const observerRef = useRef<HTMLDivElement>(null)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const [isIntersecting, setIsIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\r\n      setIsIntersecting(entry.isIntersecting)\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      intersectionObserver.observe(observerRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  return { observerRef, isIntersecting }\r\n}\r\n\r\nexport default useIntersectionObserver\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    if (isIntersecting) {\r\n      fetchFarmData()\r\n    }\r\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\r\n            new BigNumber(farm.poolWeight),\r\n            cakePrice,\r\n            totalLiquidity,\r\n            farm.lpAddresses[ChainId.MAINNET],\r\n          )\r\n          return cakeRewardsApr + lpRewardsApr\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earnUpTo}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr && !isFetchingFarmData ? (\r\n              `${highestApr}%`\r\n            ) : (\r\n              <>\r\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n                <div ref={observerRef} />\r\n              </>\r\n            )}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InFarms}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// Always include CAKE\r\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  const { t } = useTranslation()\r\n  const assetText = t('Earn %assets% in Pools', { assets })\r\n  const [earn, InPools] = assetText.split(assets)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earn}\r\n          </Heading>\r\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InPools}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, ArrowForwardIcon, Link, Button, Text, Skeleton, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getTotalWon } from 'state/predictions/helpers'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport Balance from '../../../components/Balance'\r\n\r\nconst StyledPredictionCard = styled(Card)`\r\n  background-image: url('/images/prediction_promotion.png');\r\n  background-repeat: no-repeat;\r\n  background-position: bottom right;\r\n  background-size: 50%;\r\n  min-height: 376px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    background-size: 45%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    background-size: 50%;\r\n  }\r\n`\r\n\r\nconst PredictionLive = styled(Text)`\r\n  font-size: 28px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst PredictionOver = styled(Text)`\r\n  font-size: 36px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  max-width: 380px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 50px;\r\n  }\r\n`\r\n\r\nconst PredictionWon = styled(Balance)`\r\n  font-size: 36px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 50px;\r\n  }\r\n`\r\n\r\nconst StyledSkeleton = styled(Skeleton)`\r\n  height: 40px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    height: 55px;\r\n  }\r\n`\r\n\r\nconst PredictionBNBSoFar = styled(Text)`\r\n  font-size: 22px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  max-width: 160px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    font-size: 24px;\r\n    max-width: 320px;\r\n  }\r\n`\r\n\r\nconst PredictionTryNow = styled(Flex)`\r\n  align-items: center;\r\n  max-width: 120px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nconst PredictionPromotionCard = () => {\r\n  const { t } = useTranslation()\r\n  const { slowRefresh } = useRefresh()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const [loadData, setLoadData] = useState(false)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const [bnbWon, setBnbWon] = useState(0)\r\n  const [bnbWonInUsd, setBnbWonInUsd] = useState(0)\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setLoadData(true)\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  useEffect(() => {\r\n    const fetchMarketData = async () => {\r\n      const totalWon = await getTotalWon()\r\n      setBnbWon(totalWon)\r\n    }\r\n\r\n    if (loadData) {\r\n      fetchMarketData()\r\n    }\r\n  }, [slowRefresh, loadData])\r\n\r\n  useEffect(() => {\r\n    if (bnbBusdPrice.gt(0) && bnbWon > 0) {\r\n      setBnbWonInUsd(bnbBusdPrice.times(bnbWon).toNumber())\r\n    }\r\n  }, [bnbBusdPrice, bnbWon])\r\n\r\n  const bnbWonInUsdText = bnbWonInUsd ? bnbWonInUsd.toString() : '-'\r\n  const wonBNBText = t('Over %amount% in BNB won so far', { amount: bnbWonInUsdText })\r\n  const [over, bnbSoFar] = wonBNBText.split(bnbWonInUsdText)\r\n\r\n  return (\r\n    <StyledPredictionCard>\r\n      <CardBody>\r\n        <PredictionLive mb=\"24px\">{t('Predictions Now Live')}</PredictionLive>\r\n        <PredictionOver bold color=\"#7645d9\">\r\n          {over}\r\n        </PredictionOver>\r\n        {bnbWonInUsd ? (\r\n          <PredictionWon mb=\"24px\" color=\"#7645d9\" bold prefix=\"$\" decimals={0} value={bnbWonInUsd} />\r\n        ) : (\r\n          <>\r\n            <StyledSkeleton animation=\"pulse\" variant=\"rect\" mb=\"24px\" width={180} />\r\n            <div ref={observerRef} />\r\n          </>\r\n        )}\r\n        <PredictionBNBSoFar bold mb=\"24px\">\r\n          {bnbSoFar}\r\n        </PredictionBNBSoFar>\r\n        <Text color=\"textSubtle\" mb=\"24px\">\r\n          *{t('Beta Version')}\r\n        </Text>\r\n        <Link href=\"https://pancakeswap.finance/prediction\" id=\"homepage-prediction-cta\">\r\n          <Button px={['14px', null, null, null, '20px']}>\r\n            <PredictionTryNow>\r\n              <Text color=\"white\" bold fontSize=\"16px\">\r\n                {t('Try Now')}\r\n              </Text>\r\n              <ArrowForwardIcon color=\"white\" />\r\n            </PredictionTryNow>\r\n          </Button>\r\n        </Link>\r\n      </CardBody>\r\n    </StyledPredictionCard>\r\n  )\r\n}\r\n\r\nexport default PredictionPromotionCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\n\r\nconst PrizeText = styled(Text)`\r\n  word-wrap: break-word;\r\n`\r\n\r\nconst LotteryPromotionCard: React.FC<{ currentLotteryPrize: string }> = ({ currentLotteryPrize }) => {\r\n  const { t } = useTranslation()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const prizeInBusd = cakePriceBusd.times(currentLotteryPrize)\r\n  const prizeTotal = getBalanceNumber(prizeInBusd)\r\n\r\n  const prizeTotalText = prizeInBusd.isNaN() ? prizeTotal.toString() : '-'\r\n  const prizeText = t('Over %amount% in Prizes!', { amount: prizeTotalText })\r\n  const [over, inPrizes] = prizeText.split(prizeTotalText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {t('Lottery')} V2\r\n          </Heading>\r\n          <PrizeText color=\"#7645d9\" fontSize=\"40px\" bold lineHeight=\"1.1\">\r\n            {over}\r\n          </PrizeText>\r\n          {prizeInBusd.isNaN() ? (\r\n            <>\r\n              <Skeleton height={60} width={210} />\r\n            </>\r\n          ) : (\r\n            <Balance fontSize=\"40px\" color=\"#7645d9\" bold lineHeight=\"1.1\" prefix=\"$\" decimals={0} value={prizeTotal} />\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <PrizeText color=\"contrast\" fontSize=\"28px\" bold lineHeight=\"1.1\">\r\n              {inPrizes}\r\n            </PrizeText>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default LotteryPromotionCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Button, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nconst NowLive = styled(Text)`\r\n  background: -webkit-linear-gradient(#ffd800, #eb8c00);\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  background-image: linear-gradient(#7645d9, #452a7a);\r\n  max-height: max-content;\r\n  overflow: hidden;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    max-height: 256px;\r\n  }\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst LeftWrapper = styled(Flex)`\r\n  flex-direction: column;\r\n  flex: 1;\r\n  padding-bottom: 40px;\r\n  padding-top: 24px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 40px;\r\n  }\r\n`\r\n\r\nconst RightWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 0.5;\r\n\r\n  & img {\r\n    width: 80%;\r\n    margin-top: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & img {\r\n      margin-top: 0;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex: 0.8;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & img {\r\n      margin-top: -25px;\r\n    }\r\n  }\r\n`\r\n\r\nconst PrizeFlex = styled(Flex)`\r\n  flex-direction: column;\r\n  margin-bottom: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    max-width: 640px;\r\n  }\r\n`\r\n\r\nconst Over = styled(Text)`\r\n  :empty {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst LotteryBanner: React.FC<{ currentLotteryPrize: string }> = ({ currentLotteryPrize }) => {\r\n  const { t } = useTranslation()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const prizeInBusd = cakePriceBusd.times(currentLotteryPrize)\r\n  const prizeTotal = getBalanceNumber(prizeInBusd)\r\n\r\n  const prizeTotalText = prizeInBusd.isNaN() ? prizeTotal.toString() : '-'\r\n  const prizeText = t('Over %amount% in Prizes!', { amount: prizeTotalText })\r\n  const [over, inPrizes] = prizeText.split(prizeTotalText)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Inner>\r\n        <LeftWrapper>\r\n          <NowLive>{t('Lottery Now Live')}</NowLive>\r\n          <PrizeFlex>\r\n            <Over fontSize=\"40px\" color=\"#ffffff\" bold mr=\"8px\">\r\n              {over}\r\n            </Over>\r\n            <>\r\n              {prizeInBusd.isNaN() ? (\r\n                <>\r\n                  <Skeleton height={40} width={120} mb=\"10px\" mt=\"10px\" mr=\"8px\" />\r\n                </>\r\n              ) : (\r\n                <Balance fontSize=\"40px\" color=\"#ffffff\" bold prefix=\"$\" mr=\"8px\" decimals={0} value={prizeTotal} />\r\n              )}\r\n            </>\r\n            <Text fontSize=\"40px\" color=\"#ffffff\" bold>\r\n              {inPrizes}\r\n            </Text>\r\n          </PrizeFlex>\r\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-banner\">\r\n            <Button>\r\n              <Text color=\"white\" bold fontSize=\"16px\" mr=\"4px\">\r\n                {t('Play Now')}\r\n              </Text>\r\n              <ArrowForwardIcon color=\"white\" />\r\n            </Button>\r\n          </NavLink>\r\n        </LeftWrapper>\r\n        <RightWrapper>\r\n          <img src=\"/images/lottery/tombola.png\" alt=\"lottery bunny\" />\r\n        </RightWrapper>\r\n      </Inner>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default LotteryBanner\r\n","import { useState, useEffect } from 'react'\r\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\r\nimport useRefresh from 'hooks/useRefresh'\r\n\r\nconst useFetchLotteryForPromos = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [lotteryId, setLotteryId] = useState<string>(null)\r\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID\r\n    const fetchCurrentID = async () => {\r\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\r\n      setLotteryId(currentLotteryId)\r\n    }\r\n\r\n    fetchCurrentID()\r\n  }, [setLotteryId])\r\n\r\n  useEffect(() => {\r\n    // get public data for current lottery\r\n    const fetchCurrentLotteryPrize = async () => {\r\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\r\n      setCurrentLotteryPrize(amountCollectedInCake)\r\n    }\r\n\r\n    if (lotteryId) {\r\n      fetchCurrentLotteryPrize()\r\n    }\r\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\r\n\r\n  return { currentLotteryPrize }\r\n}\r\n\r\nexport default useFetchLotteryForPromos\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport PredictionPromotionCard from 'views/Home/components/PredictionPromotionCard'\r\nimport LotteryPromotionCard from 'views/Home/components/LotteryPromotionCard'\r\nimport LotteryBanner from 'views/Home/components/LotteryBanner'\r\nimport useFetchLotteryForPromos from 'views/Home/hooks/useFetchLotteryForPromos'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { currentLotteryPrize } = useFetchLotteryForPromos()\r\n\r\n  return (\r\n    <>\r\n      <LotteryBanner currentLotteryPrize={currentLotteryPrize} />\r\n      <Page>\r\n        <Hero>\r\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n            {t('PancakeSwap')}\r\n          </Heading>\r\n          <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n        </Hero>\r\n        <div>\r\n          <Cards>\r\n            <FarmStakingCard />\r\n            <PredictionPromotionCard />\r\n          </Cards>\r\n          <CTACards>\r\n            <EarnAPRCard />\r\n            <EarnAssetCard />\r\n            <LotteryPromotionCard currentLotteryPrize={currentLotteryPrize} />\r\n          </CTACards>\r\n          <Cards>\r\n            <CakeStats />\r\n            <TotalValueLockedCard />\r\n          </Cards>\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}